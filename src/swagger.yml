openapi: 3.1.0

info:
  title: midgard-api
  description: midgard-api documentation for version 1
  version: "1.0"

servers:
  - url: http://localhost:4000/v1

tags:
  - name: authentication
    description: Operations about authentication operations
  - name: organizer/groups
    description: Operations about organizer operations
  - name: organizer/schedules
    description: Operations about organizer operations
  - name: organizer/lists
    description: Operations about organizer operations
  - name: player
    description: Operations about organizer operations

paths:
  /auth/register:
    post:
      tags:
        - authentication
      description: Register new organizer or player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterSchema"
      responses:
        "201":
          description: OK
        "400":
          description: Invalid input
        "422":
          description: User already exists
  /auth/login:
    post:
      tags:
        - authentication
      description: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginSchema"
      responses:
        "200":
          description: OK
        "400":
          description: Invalid input
        "422":
          description: User not found
  /auth/forgot-password:
    post:
      tags:
        - authentication
      description: Forgot password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordSchema"
      responses:
        "200":
          description: OK
        "400":
          description: Invalid input
        "422":
          description: User not found
  /auth/reset-password/{token}:
    put:
      tags:
        - authentication
      description: Reset password
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Invalid input
        "422":
          description: Invalid token

  /organizer/group:
    post:
      tags:
        - organizer/groups
      description: Create new group
      summary: Create new group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupSchema"
      responses:
        "201":
          description: OK
        "400":
          description: Invalid input
        "422":
          description: Group already exists
  /organizer/groups:
    get:
      tags:
        - organizer/groups
      description: Get list of groups
      summary: Get list of groups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfGroupsSchema"
        "400":
          description: Invalid input
  /organizer/group/details/{groupId}:
    get:
      tags:
        - organizer/groups
      description: Get group details
      summary: Get group details
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupOutputSchema"
        "400":
          description: Invalid input
        "422":
          description: Group not found
  /organizer/group/{groupId}:
    put:
      tags:
        - organizer/groups
      description: Update group
      summary: Update group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupSchema"
      responses:
        "201":
          description: OK
        "400":
          description: Invalid input
        "422":
          description: Group not found

  /organizer/schedule:
    post:
      tags:
        - organizer/schedules
      description: Create new Schedule
      summary: Create new Schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateScheduleSchema"
      responses:
        "201":
          description: OK
        "400":
          description: Invalid input
        "422":
          description: Schedule already exists
  /organizer/schedules/group/{groupId}:
    get:
      tags:
        - organizer/schedules
      description: Get list of schedules by groupId
      summary: Get list of schedules by groupId
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfSchedulesSchema"
        "400":
          description: Invalid input
        "422":
          description: Group not found
  /organizer/schedule/details/{scheduleId}:
    get:
      tags:
        - organizer/schedules
      description: Get schedule details
      summary: Get schedule details
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleOutputSchema"
        "400":
          description: Invalid input
        "422":
          description: Schedule not found
  /organizer/schedule/update/{scheduleId}:
    put:
      tags:
        - organizer/schedules
      description: Update schedule
      summary: Update schedule
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateScheduleSchema"
      responses:
        "201":
          description: OK
        "400":
          description: Invalid input
        "422":
          description: Schedule not found

  /organizer/list:
    post:
      tags:
        - organizer/lists
      description: Create new list
      summary: Create new list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateListSchema"
      responses:
        "201":
          description: OK
        "400":
          description: Invalid input
  /organizer/lists/group/{groupId}:
    get:
      tags:
        - organizer/lists
      description: Get list of lists by groupId
      summary: Get list of lists by groupId
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfListsSchema"
        "400":
          description: Invalid input
  /organizer/list/details/{listId}:
    get:
      tags:
        - organizer/lists
      description: Get list details
      summary: Get list details
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOutputSchema"
        "400":
          description: Invalid input
  /organizer/list/{listId}:
    put:
      tags:
        - organizer/lists
      description: Update list
      summary: Update list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateListSchema"
      responses:
        "201":
          description: OK

components:
  schemas:
    RegisterSchema:
      type: object
      properties:
        name:
          type: string
          examples: ["guido"]
        surname:
          type: string
          examples: ["guido"]
        email:
          type: string
          format: email
          examples: ["guiro@email.com"]
        type:
          type: string
          enum: [PLAYER, ORGANIZER]
          examples: ["PLAYER", "ORGANIZER"]
        login:
          type: string
          examples: ["guiro.guido"]
        password:
          type: string
          examples: ["123456"]
        phoneNumber:
          type: integer
          examples: [2222222222]
      required:
        ["name", "surname", "email", "type", "login", "password", "phoneNumber"]

    LoginSchema:
      type: object
      properties:
        login:
          type: string
          examples: ["guiro.guido"]
        password:
          type: string
          examples: [123456]
      required: ["login", "password"]

    ForgotPasswordSchema:
      type: object
      properties:
        phoneNumber:
          type: integer
          examples: [123456]
      required: ["phoneNumber"]

    ResetPasswordSchema:
      type: object
      properties:
        password:
          type: string
          examples: [123456]
        confirmPassword:
          type: string
          examples: [123456]
      required: ["password"]

    CreateGroupSchema:
      type: object
      properties:
        description:
          description: string
          type: string
          examples: ["Grupo de vôlei do Kinho"]
        visibility:
          type: string
          enum: [PUBLIC, PRIVATE]
          examples: ["PUBLIC", "PRIVATE"]
        sportType:
          type: string
          enum: ["SOCCER", "BASKETBALL", "VOLLEYBALL"]
          examples:
            [
              "SOCCER",
              "BASKETBALL",
              "VOLLEYBALL",
              "HANDBALL",
              "TENNIS",
              "FOOTBALL",
              "SWIMMING",
              "RUNNING",
              "CYCLING",
              "GYM",
              "OTHER",
            ]
      required: ["description", "visibility", "sportType"]

    UpdateGroupSchema:
      type: object
      properties:
        description:
          description: string
          type: string
          examples: ["Grupo de véléi do Kinho"]
        status:
          type: boolean
          examples: [true]
          description: true = active, false = inactive
        visibility:
          type: string
          enum: [PUBLIC, PRIVATE]
          examples: ["PUBLIC", "PRIVATE"]
        sportType:
          type: string
          enum: ["SOCCER", "BASKETBALL", "VOLLEYBALL"]
          examples:
            [
              "SOCCER",
              "BASKETBALL",
              "VOLLEYBALL",
              "HANDBALL",
              "TENNIS",
              "FOOTBALL",
            ]
      required: ["description", "visibility", "sportType", "status"]

    ListOfGroupsSchema:
      type: object
      properties:
        data:
          type: object
          properties:
            active:
              type: array
              items:
                $ref: "#/components/schemas/GroupOutputSchema"
            inactive:
              type: array
              items:
                $ref: "#/components/schemas/GroupOutputSchema"

    GroupOutputSchema:
      type: object
      properties:
        id:
          type: integer
          examples: [1]
        description:
          type: string
          examples: ["guido"]
        visibility:
          type: string
          enum: [PUBLIC, PRIVATE]
          examples: ["PUBLIC", "PRIVATE"]
        isActive:
          type: boolean
          examples: [true]
        sportType:
          type: string
          enum: ["SOCCER", "BASKETBALL", "VOLLEYBALL"]
          examples: ["SOCCER", "BASKETBALL", "VOLLEYBALL", "HANDBALL"]
        createdAt:
          type: string
          format: date
          examples: ["2022-01-01T00:00:00.000Z"]

    CreateListSchema:
      type: object
      properties:
        status:
          type: boolean
          examples: [true, false]
        limitOfPlayers:
          type: integer
          examples: [18]
        startingTime:
          type: string
          format: time
          examples: ["08:00"]
        endingTime:
          type: string
          format: time
          examples: ["17:00"]
        dayOfWeek:
          type: string
          enum:
            [
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday",
              "sunday",
            ]
          examples: ["monday"]
        groupId:
          type: integer
          examples: [1]
        localId:
          type: integer
          examples: [1]
      required:
        [
          "status",
          "limitOfPlayers",
          "startingTime",
          "endingTime",
          "dayOfWeek",
          "groupId",
          "localId",
        ]

    ListOfListsSchema:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ListOutputSchema"

    ListOutputSchema:
      type: object
      properties:
        id:
          type: integer
          examples: [1]
        status:
          type: boolean
          examples: [true, false]
        limitOfPlayers:
          type: integer
          examples: [18]
        startingTime:
          type: string
          format: time
          examples: ["08:00"]
        endingTime:
          type: string
          format: time
          examples: ["17:00"]
        dayOfWeek:
          type: string
          enum:
            - monday
            - tuesday
            - wednesday
            - thursday
            - friday
            - saturday
            - sunday
          examples: ["monday"]
        groupId:
          type: integer
          examples: [1]
        localId:
          type: integer
          examples: [1]

    UpdateListSchema:
      type: object
      properties:
        properties:
        status:
          type: boolean
          examples: [true, false]
        limitOfPlayers:
          type: integer
          examples: [18]
        startingTime:
          type: string
          format: time
          examples: ["08:00"]
        endingTime:
          type: string
          format: time
          examples: ["17:00"]
        dayOfWeek:
          type: string
          enum:
            [
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday",
              "sunday",
            ]
          examples: ["monday"]
        groupId:
          type: integer
          examples: [1]
        localId:
          type: integer
          examples: [1]
      required:
        [
          "status",
          "limitOfPlayers",
          "startingTime",
          "endingTime",
          "dayOfWeek",
          "groupId",
          "localId",
        ]

    CreateScheduleSchema:
      type: object
      properties:
        dayOfWeek:
          type: string
          enum:
            [
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday",
              "sunday",
            ]
          examples: ["monday"]
        startTime:
          type: string
          format: time
          examples: ["08:00"]
        endTime:
          type: string
          format: time
          examples: ["17:00"]
        groupId:
          type: integer
          examples: [1]
        localId:
          type: integer
          examples: [1]
      required: ["dayOfWeek", "startTime", "endTime", "groupId", "localId"]

    ListOfSchedulesSchema:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ScheduleOutputSchema"

    ScheduleOutputSchema:
      type: object
      properties:
        id:
          type: integer
          examples: [1]
        dayOfWeek:
          type: string
          enum:
            [
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday",
              "sunday",
            ]
          examples: ["monday"]
        startTime:
          type: string
          format: time
          examples: ["08:00"]
        endTime:
          type: string
          format: time
          examples: ["17:00"]
        groupId:
          type: integer
          examples: [1]
        localId:
          type: integer
          examples: [1]

    UpdateScheduleSchema:
      type: object
      properties:
        dayOfWeek:
          type: string
          enum:
            [
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday",
              "sunday",
            ]
          examples: ["monday"]
        startTime:
          type: string
          format: time
          examples: ["08:00"]
        endTime:
          type: string
          format: time
          examples: ["17:00"]
        groupId:
          type: integer
          examples: [1]
        localId:
          type: integer
          examples: [1]
      required: ["dayOfWeek", "startTime", "endTime", "groupId", "localId"]
